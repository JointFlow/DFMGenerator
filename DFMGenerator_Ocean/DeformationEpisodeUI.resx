<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTipManager_DeformationEpisode.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="toolTipItem7.Text" xml:space="preserve">
    <value>NB extensional strain is negative, so the minimum horizontal strain rate represents the maximum extension rate, and should have predominantly negative values; typical values are in the range -0.001 to -0.01/ma. The maximum horizontal strain rate may be negative, zero or positive.</value>
  </data>
  <data name="toolTipItem8.Text" xml:space="preserve">
    <value>This represents the direction of maximum extension, and controls the orientation of the fractures in the DFN: the primary fracture set forms perpendicular to this and the secondary fracture set forms parallel to this. If a grid property is specified, the fractures will bend at cell boundaries to reflect changes in the strain orientation.</value>
  </data>
  <data name="toolTipItem9.Text" xml:space="preserve">
    <value>With a static load, fracturing is driven by an applied horizontal strain (specified as a minimum and maximum strain rate and an orientation), fluid overpressure, thermal contraction and/or uplift. Specify the strain orientation and rate, fluid pressure, temperature change or uplift rate as grid properties to model lateral variations in the load data. If no grid property is specified, the model will apply the specified default values to all cells.</value>
  </data>
  <data name="toolTipItem11.Text" xml:space="preserve">
    <value>With a dynamic load, DFM Generator uses results from a geomechanical simulation to define the load for a deformation episode. To do this, specify a simulation case and the grid property results from that simulation case for the components of the absolute (total) stress tensor and the fluid pressure. </value>
  </data>
  <data name="toolTipItem12.Text" xml:space="preserve">
    <value>If only the fluid pressure and ZZ component of the total stress are specified, the static fluid overpressure load and uplift rate will be overridden but the horizontal strain load will be used to calculate the horizontal stress components.</value>
  </data>
  <data name="toolTipItem14.Text" xml:space="preserve">
    <value>If the vertical shear stress components (YZ and ZX) are unspecified, they will be taken as zero and the fracture set will be horizontally symmetrical. If they are speicifed, the fracture set will not be horizontally symmetrical.  </value>
  </data>
  <data name="toolTipItem17.Text" xml:space="preserve">
    <value>Enter the XX, YY, XY, ZX, YZ and ZZ elements of the absolute (total) stress tensor here to override the static horizontal strain load. The effective stress will be adjusted at the start of the deformation episode to match the initial stress in the specified results, and the subsequent effective stress rate will be calculated from the specified result data.</value>
  </data>
  <data name="toolTipItem18.Text" xml:space="preserve">
    <value>NB If only the ZZ component is specified, the static horizontal strain load will be used to calculate horizontal stress. At a minimum the XX, YY and XY components are required to override the static horizontal strain load. The YZ and ZX components will be set to 0 if not specified.</value>
  </data>
  <data name="toolTipItem19.Text" xml:space="preserve">
    <value>Enter the fluid pressure grid property result here to override the static fluid overpressure rate. The fluid will be adjusted at the start of the deformation episode to match the initial pressure in the specified result, and the subsequent fluid overpressure rate will be taken from the specified result data.</value>
  </data>
</root>
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTipManager_DFMGenerator.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="toolTipItem6.Text" xml:space="preserve">
    <value>If unchecked, 6 fracture sets will be generated striking at 30 degree intervals. The oblique fracture sets may experience strike-slip displacement, depending on the applied strain. This will give longer runtimes and generate more output data, so is only recommended in strike-slip stress regimes.</value>
  </data>
  <data name="toolTipItem8.Text" xml:space="preserve">
    <value>Use this to output  a series of explicit DFNs and implicit fracture data representing intermediate stages in the evolution of the fracture network. This can be useful for risk analysis, as it allows automatic generation of multiple, geologically realistic fracture models representing low, mid and high case scenarios. If set to 0, output will only be generated for the final, fully developed fracture network.</value>
  </data>
  <data name="toolTipItem9.Text" xml:space="preserve">
    <value>Specify the K indices of the top and bottom of the brittle layer containing the layer-bound fractures. If this spans multiple grid layers, these will be amalgamated into "cell stacks" for the purpose of calculation. In the output data, the same fracture density values will be applied to every cell in the stack; these represent the fracture densities across the entire brittle layer.</value>
  </data>
  <data name="toolTipItem11.Text" xml:space="preserve">
    <value>Use the column and row controls to limit the model to a part of the overall grid. Leave these blank to run the model on the entire grid. NB since the model may take several hours to run on a large grid, it is recommended to run a test on a small part of the grid beforehand.</value>
  </data>
  <data name="toolTipItem13.Text" xml:space="preserve">
    <value>Assign each fracture model a unique name to help identify the model output. This name will be applied to the output folders containing the implicit fracture properties and to the DFN objects. NB The parameters used to generate each fracture model are recorded on the comments tab of the output folders and DFNs.</value>
  </data>
  <data name="toolTipItem14.Text" xml:space="preserve">
    <value>The units for the initial microfracture density A will vary, depending on the value of the initial microfracture size distribution c: [A] fractures/[length]^3-c. Note that specified values for the initial microfracture density will not be recalculated automatically if the initial microfracture size distribution values are changed. It is recommended that the default values are used, as these are valid for most fractured layers.</value>
  </data>
  <data name="toolTipItem15.Text" xml:space="preserve">
    <value>The default value for friction should be supplied as a friction coefficient, not a friction angle [friction coefficient = tan(friction angle)]. However if a grid property with the Friction Angle template is supplied, this will automatically be converted to a friction coefficient.</value>
  </data>
  <data name="toolTipItem16.Text" xml:space="preserve">
    <value>This parameter allows for time-dependent (viscoelastic) relaxation of elastic strain around the fractures only; distributed elastic strain in the rockmass will not dissipate. To activate this, the rock strain relaxation must be set to 0.</value>
  </data>
  <data name="toolTipItem17.Text" xml:space="preserve">
    <value>If the specified brittle layer contains multiple grid (K) layers and mechanical properties are specified as grid properties, check this box to calculate the average value for each property within each cell stack and apply it to the entire stack. If unchecked, the value of the top cell in the stack will be applied to the entire stack.</value>
  </data>
  <data name="toolTipItem18.Text" xml:space="preserve">
    <value>This controls the fracture propation rate. Set to &lt;5 for slow subcritical propagation, 5-15 for intermediate propagation, &gt;15 for rapid critical propagation. Typical values in lithified sedimetary rocks are 10-100.</value>
  </data>
  <data name="toolTipItem19.Text" xml:space="preserve">
    <value>This controls time-dependent (viscoelastic) strain relaxation in the rockmass as a whole (including elastic strain around the fractures). It represents the time taken for elastic strain in the rockmass to decrease by a factor of 1/e; NB lower values therefore correspond to more strain relaxation. Set to 0 or leave blank to switch off viscoelastic strain relaxation.</value>
  </data>
  <data name="toolTipItem20.Text" xml:space="preserve">
    <value>Specify the mechanical property data as grid properties to model lateral variations in the mechanical properties of the layer. If no grid property is specified for a given mechanical property, the model will apply the specified default values to all cells.</value>
  </data>
  <data name="toolTipItem23.Text" xml:space="preserve">
    <value>If the specified brittle layer contains multiple grid (K) layers and horizontal strain parameters are specified as grid properties, check this box to calculate the average value for each property within each cell stack and apply it to the entire stack. If unchecked, the value of the top cell in the stack will be applied to the entire stack. It is recommended to keep this unchecked, as averaging the strain orientation can lead to anomalous results. </value>
  </data>
  <data name="toolTipItem24.Text" xml:space="preserve">
    <value>This controls the initial horizontal stress, prior to the application of horizontal strain:
- Set to 0 for elastic equilibrium, Sh0' = v/(1-v) * Sv'.
- Set to 1 for viscoelastic equilibrium, Sh0' = Sv'.
- Leave blank for critical stress state, Sh0' = Mohr-Coulomb failure stress</value>
  </data>
  <data name="toolTipItem25.Text" xml:space="preserve">
    <value>This determines the effective vertical stress, in conjunction with the sediment and fluid density and the fluid overpressure. If blank, the current depth of burial will be used to determine the effective vertical stress.</value>
  </data>
  <data name="toolTipItem27.Text" xml:space="preserve">
    <value>Calculates the aperture for shear fractures subject to a compressive normal stress using the Barton-Bandis formula (Bandis et al. 1983, Int J Rock Mech, Min Sci &amp; Geomech Abs 20, 249-268). The calculation is based on the in situ stress state at the end of deformation and various parameters related to the fracture morphology; the default values given here are typical for shear fractures in sedimentary rocks.</value>
  </data>
  <data name="toolTipItem28.Text" xml:space="preserve">
    <value>Calculates the equilibrium elastic aperture for dilatant fractures subject to a tensile normal stress. An arbitrary user-defined multiplier can also be applied. The calculation is based on the in situ stress state at the end of deformation; NB if this is compressive (e.g. for Mode 2 shear fractures), the resulting fracture porosity will be 0.</value>
  </data>
  <data name="toolTipItem29.Text" xml:space="preserve">
    <value>Maximum fracture aperture is proportional to the minimum fracture dimension (fracture diameter for microfractures, layer thickness for layer-bound fractures). Different scaling factors can be defined for fractures striking perpendicular to the minimum (i.e. most tensile) and maximum horizontal stress.</value>
  </data>
  <data name="toolTipItem30.Text" xml:space="preserve">
    <value>All fractures are assigned an arbitrary user-specified aperture. Different apertures can be specified for fractures oriented perpendicular to the minimum (i.e. most tensile) and maximum horizontal stress.</value>
  </data>
  <data name="toolTipItem31.Text" xml:space="preserve">
    <value>Check this to calculate bulk rock compliance and stiffness tensors, that include the effect of fractures on the elastic properties. These are 4th order tensors with 36 components each, output as grid properties in their own output folder. They are only generated for the final timestep.</value>
  </data>
  <data name="toolTipItem32.Text" xml:space="preserve">
    <value>Check this to calculate fracture connectivity indices (ratio of I, R and Y nodes) for individual fracture sets and for the entire fracture network, as well as anisotropy indices for the network. These will be output as grid properties in the implicit output folder(s).</value>
  </data>
  <data name="toolTipItem39.Text" xml:space="preserve">
    <value>Generate output files representing the explicit DFN, in ASCII or FAB format; the FAB format is compatible with Petrel and other common fracture modelling packages. 2 files will be generated for the final network: one representing the microfractures and one representing the layer-bound fractures. An additional 2 files will also be generated for each intermediate stage output. Output files are written to $home\DFNFolder or to the project folder.</value>
  </data>
  <data name="toolTipItem40.Text" xml:space="preserve">
    <value>Generate output files showing the evolution of the implicit fracture density data through time. Output files are written to $home\DFNFolder or to the project folder. NB this will generate one file per cell stack so may generate a large number of files for a large grid.</value>
  </data>
  <data name="toolTipItem41.Text" xml:space="preserve">
    <value>Position of fracture nucleation within the layer; set to 0 to force all fractures to nucleate at the base of the layer and 1 to force all fractures to nucleate at the top of the layer; set to -1 to nucleate fractures at random locations within the layer.
</value>
  </data>
  <data name="toolTipItem54.Text" xml:space="preserve">
    <value>Maximum increase in volumetric macrofracture ratio (MFP33) allowed in each timestep. This controls the optimal timestep duration. If it is increased, there will be fewer but longer timesteps; the calculation will run faster but with greater discretisation error.</value>
  </data>
  <data name="toolTipItem56.Text" xml:space="preserve">
    <value>Total microfracture area (uFP32) and porosity must be calculated by numerical integration. The number of bins controls the accuracy of the numerical integration - increase this to increase the accuracy of the calculated uFP32 and porosity at expense of runtime.</value>
  </data>
  <data name="toolTipItem57.Text" xml:space="preserve">
    <value>Minimum radius for microfractures to be included in implicit fracture density and porosity calculations. If this is set to 0 (i.e. include all microfractures) then it will not be possible to calculate volumetric microfracture density (uFP30) as this will be infinite. If blank, the maximum radius of the smallest bin will be used (i.e. exclude the smallest bin from the microfracture population).</value>
  </data>
  <data name="toolTipItem58.Text" xml:space="preserve">
    <value>Use this control to amalgamate Petrel grid cells laterally as well as vertically, and thus reduce the number of cell stacks. In addition to reducing model runtime, this will reduce the height:width ratio of the cell stacks; for optimal results this should be less than 1/2. However faults will not be honoured in horizontally upscaled grids (i.e. fractures may cut across faults). </value>
  </data>
  <data name="toolTipItem64.Text" xml:space="preserve">
    <value>By default, checking for stress shadow interaction is only carried out against other macrofractures in the same cell stack. Some stress shadow interactions may therefore be missed for fractures parallel to and close to the cell stack boundaries. Use this control to search adjacent cell stacks for stress shadow interaction; this will increase runtime. If set to automatic, the requirement to search adjacent cell stacks will be determined independently for each cell stack based on its geometry.</value>
  </data>
  <data name="toolTipItem66.Text" xml:space="preserve">
    <value>This controls the order in which fractures are propagated within each timestep: if checked, fractures will be propagated in order of nucleation time regardless of fracture set; if unchecked they will be propagated in order of fracture set. Propagating in strict order of nucleation time removes bias in fracture lengths between sets, but will add a small overhead to calculation time.</value>
  </data>
  <data name="toolTipItem67.Text" xml:space="preserve">
    <value>By default, fractures nucleate deterministically at regular intervals determined by the microfracture density and growth rate. However if the cell stacks are small relative to the fracture spacing, so the average number of fractures per cell stack is less than 1, no fractures will nucleate. This control allows the timing of fracture nucleation to be controlled probabilistically, if the number of fractures nucleating per timestep is less than the specified value. This will allow some fractures to nucleate even when cell stacks are small.</value>
  </data>
  <data name="toolTipItem70.Text" xml:space="preserve">
    <value>NB If probabilistic fracture nucleation is required to generate fractures, it is often because the height:width ratio of the cell stacks is too high. Try using horizontal upscaling to reduce this instead.</value>
  </data>
  <data name="toolTipItem71.Text" xml:space="preserve">
    <value>The explicit DFN will not be generated in cell stacks thinner than this cutoff. Set this to prevent the generation of excessive numbers of fractures in very thin cell stacks, e.g. where there is pinch-out of the brittle layer.</value>
  </data>
  <data name="toolTipItem72.Text" xml:space="preserve">
    <value>This represents the maximum variation in fracture propagation azimuth allowed across gridblock boundary. If the orientation of the fracture set varies across the gridblock boundary by more than this angle, the algorithm will seek a better matching set.</value>
  </data>
  <data name="toolTipItem77.Text" xml:space="preserve">
    <value>Increase these cutoffs to reduce the sensitivity and stop the calculation earlier. Use this to prevent a long calculation tail - i.e. late timesteps where fractures have stopped growing so they have no impact on fracture populations, just increase runtime. Any criteria left blank will not be used.</value>
  </data>
</root>